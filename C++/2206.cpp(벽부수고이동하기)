#include <cstdio>
#include <stack>
#include <queue>

using namespace std;
int h, w;
int map[1000][1000] = { 0, };
int check[1000][1000][2] = { 0, };
int dx[4] = { 1,0,-1,0 };
int dy[4] = { 0,1,0,-1 };

int main() {


	queue<pair<int, int>> q;
	queue<int> wall;

	scanf("%d %d", &h, &w);

	for (int i = 0;i < h;i++) {
		for (int j = 0;j < w;j++) {
			scanf("%1d", &map[i][j]);
		}
	}

	q.push(make_pair(0, 0));
	check[0][0][1] = 1;
	wall.push(1);
	while (!q.empty()) {
		int x, y;
		int wall_cnt = wall.front();
		x = q.front().second;
		y = q.front().first;
		q.pop();
		wall.pop();



		for (int i = 0;i < 4;i++) {
			if (x + dx[i] >= 0 && x + dx[i] < w && y + dy[i] >= 0 && y + dy[i] < h) {
				if (check[y + dy[i]][x + dx[i]][wall_cnt] == 0 && map[y + dy[i]][x + dx[i]] == 0) {
					q.push(make_pair(y + dy[i], x + dx[i]));
					check[y + dy[i]][x + dx[i]][wall_cnt] = check[y][x][wall_cnt] + 1;
					wall.push(wall_cnt);
				}
				if (map[y + dy[i]][x + dx[i]] == 1 && wall_cnt == 1) {
					q.push(make_pair(y + dy[i], x + dx[i]));
					check[y + dy[i]][x + dx[i]][0] = check[y][x][1] + 1;
					wall.push(wall_cnt - 1);
				}
			}
		}
		
					
				
		
		

	}
	if (check[h - 1][w - 1][0] == 0 && check[h - 1][w - 1][1] == 0)
		printf("-1\n");

	else if (check[h - 1][w - 1][0] == 0)
		printf("%d\n", check[h - 1][w - 1][1]);
	else if (check[h - 1][w - 1][1] == 0)
		printf("%d\n", check[h - 1][w - 1][0]);
	else
		printf("%d\n", min(check[h - 1][w - 1][0], check[h - 1][w - 1][1]));

	scanf("%d", &h);

	return 0;
}
